-- ==============================================================
-- Generated by Vitis HLS v2025.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity MatrixMult_NoCache is
generic (
    C_M_AXI_MATRIX_A_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_MATRIX_A_ID_WIDTH : INTEGER := 1;
    C_M_AXI_MATRIX_A_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MATRIX_A_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_MATRIX_A_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MATRIX_A_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MATRIX_A_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MATRIX_A_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MATRIX_B_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_MATRIX_B_ID_WIDTH : INTEGER := 1;
    C_M_AXI_MATRIX_B_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MATRIX_B_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_MATRIX_B_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MATRIX_B_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MATRIX_B_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MATRIX_B_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MATRIX_C_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_MATRIX_C_ID_WIDTH : INTEGER := 1;
    C_M_AXI_MATRIX_C_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MATRIX_C_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_MATRIX_C_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MATRIX_C_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MATRIX_C_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MATRIX_C_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CTRL_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CTRL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_MATRIX_A_USER_VALUE : INTEGER := 0;
    C_M_AXI_MATRIX_A_PROT_VALUE : INTEGER := 0;
    C_M_AXI_MATRIX_A_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_MATRIX_B_USER_VALUE : INTEGER := 0;
    C_M_AXI_MATRIX_B_PROT_VALUE : INTEGER := 0;
    C_M_AXI_MATRIX_B_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_MATRIX_C_USER_VALUE : INTEGER := 0;
    C_M_AXI_MATRIX_C_PROT_VALUE : INTEGER := 0;
    C_M_AXI_MATRIX_C_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_matrix_a_AWVALID : OUT STD_LOGIC;
    m_axi_matrix_a_AWREADY : IN STD_LOGIC;
    m_axi_matrix_a_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_MATRIX_A_ADDR_WIDTH-1 downto 0);
    m_axi_matrix_a_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_MATRIX_A_ID_WIDTH-1 downto 0);
    m_axi_matrix_a_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_matrix_a_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_matrix_a_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_matrix_a_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_matrix_a_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_matrix_a_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_matrix_a_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_matrix_a_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_matrix_a_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_MATRIX_A_AWUSER_WIDTH-1 downto 0);
    m_axi_matrix_a_WVALID : OUT STD_LOGIC;
    m_axi_matrix_a_WREADY : IN STD_LOGIC;
    m_axi_matrix_a_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_MATRIX_A_DATA_WIDTH-1 downto 0);
    m_axi_matrix_a_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_MATRIX_A_DATA_WIDTH/8-1 downto 0);
    m_axi_matrix_a_WLAST : OUT STD_LOGIC;
    m_axi_matrix_a_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_MATRIX_A_ID_WIDTH-1 downto 0);
    m_axi_matrix_a_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_MATRIX_A_WUSER_WIDTH-1 downto 0);
    m_axi_matrix_a_ARVALID : OUT STD_LOGIC;
    m_axi_matrix_a_ARREADY : IN STD_LOGIC;
    m_axi_matrix_a_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_MATRIX_A_ADDR_WIDTH-1 downto 0);
    m_axi_matrix_a_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_MATRIX_A_ID_WIDTH-1 downto 0);
    m_axi_matrix_a_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_matrix_a_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_matrix_a_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_matrix_a_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_matrix_a_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_matrix_a_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_matrix_a_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_matrix_a_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_matrix_a_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_MATRIX_A_ARUSER_WIDTH-1 downto 0);
    m_axi_matrix_a_RVALID : IN STD_LOGIC;
    m_axi_matrix_a_RREADY : OUT STD_LOGIC;
    m_axi_matrix_a_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_MATRIX_A_DATA_WIDTH-1 downto 0);
    m_axi_matrix_a_RLAST : IN STD_LOGIC;
    m_axi_matrix_a_RID : IN STD_LOGIC_VECTOR (C_M_AXI_MATRIX_A_ID_WIDTH-1 downto 0);
    m_axi_matrix_a_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_MATRIX_A_RUSER_WIDTH-1 downto 0);
    m_axi_matrix_a_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_matrix_a_BVALID : IN STD_LOGIC;
    m_axi_matrix_a_BREADY : OUT STD_LOGIC;
    m_axi_matrix_a_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_matrix_a_BID : IN STD_LOGIC_VECTOR (C_M_AXI_MATRIX_A_ID_WIDTH-1 downto 0);
    m_axi_matrix_a_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_MATRIX_A_BUSER_WIDTH-1 downto 0);
    m_axi_matrix_b_AWVALID : OUT STD_LOGIC;
    m_axi_matrix_b_AWREADY : IN STD_LOGIC;
    m_axi_matrix_b_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_MATRIX_B_ADDR_WIDTH-1 downto 0);
    m_axi_matrix_b_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_MATRIX_B_ID_WIDTH-1 downto 0);
    m_axi_matrix_b_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_matrix_b_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_matrix_b_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_matrix_b_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_matrix_b_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_matrix_b_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_matrix_b_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_matrix_b_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_matrix_b_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_MATRIX_B_AWUSER_WIDTH-1 downto 0);
    m_axi_matrix_b_WVALID : OUT STD_LOGIC;
    m_axi_matrix_b_WREADY : IN STD_LOGIC;
    m_axi_matrix_b_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_MATRIX_B_DATA_WIDTH-1 downto 0);
    m_axi_matrix_b_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_MATRIX_B_DATA_WIDTH/8-1 downto 0);
    m_axi_matrix_b_WLAST : OUT STD_LOGIC;
    m_axi_matrix_b_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_MATRIX_B_ID_WIDTH-1 downto 0);
    m_axi_matrix_b_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_MATRIX_B_WUSER_WIDTH-1 downto 0);
    m_axi_matrix_b_ARVALID : OUT STD_LOGIC;
    m_axi_matrix_b_ARREADY : IN STD_LOGIC;
    m_axi_matrix_b_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_MATRIX_B_ADDR_WIDTH-1 downto 0);
    m_axi_matrix_b_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_MATRIX_B_ID_WIDTH-1 downto 0);
    m_axi_matrix_b_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_matrix_b_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_matrix_b_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_matrix_b_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_matrix_b_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_matrix_b_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_matrix_b_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_matrix_b_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_matrix_b_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_MATRIX_B_ARUSER_WIDTH-1 downto 0);
    m_axi_matrix_b_RVALID : IN STD_LOGIC;
    m_axi_matrix_b_RREADY : OUT STD_LOGIC;
    m_axi_matrix_b_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_MATRIX_B_DATA_WIDTH-1 downto 0);
    m_axi_matrix_b_RLAST : IN STD_LOGIC;
    m_axi_matrix_b_RID : IN STD_LOGIC_VECTOR (C_M_AXI_MATRIX_B_ID_WIDTH-1 downto 0);
    m_axi_matrix_b_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_MATRIX_B_RUSER_WIDTH-1 downto 0);
    m_axi_matrix_b_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_matrix_b_BVALID : IN STD_LOGIC;
    m_axi_matrix_b_BREADY : OUT STD_LOGIC;
    m_axi_matrix_b_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_matrix_b_BID : IN STD_LOGIC_VECTOR (C_M_AXI_MATRIX_B_ID_WIDTH-1 downto 0);
    m_axi_matrix_b_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_MATRIX_B_BUSER_WIDTH-1 downto 0);
    m_axi_matrix_c_AWVALID : OUT STD_LOGIC;
    m_axi_matrix_c_AWREADY : IN STD_LOGIC;
    m_axi_matrix_c_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_MATRIX_C_ADDR_WIDTH-1 downto 0);
    m_axi_matrix_c_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_MATRIX_C_ID_WIDTH-1 downto 0);
    m_axi_matrix_c_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_matrix_c_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_matrix_c_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_matrix_c_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_matrix_c_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_matrix_c_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_matrix_c_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_matrix_c_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_matrix_c_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_MATRIX_C_AWUSER_WIDTH-1 downto 0);
    m_axi_matrix_c_WVALID : OUT STD_LOGIC;
    m_axi_matrix_c_WREADY : IN STD_LOGIC;
    m_axi_matrix_c_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_MATRIX_C_DATA_WIDTH-1 downto 0);
    m_axi_matrix_c_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_MATRIX_C_DATA_WIDTH/8-1 downto 0);
    m_axi_matrix_c_WLAST : OUT STD_LOGIC;
    m_axi_matrix_c_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_MATRIX_C_ID_WIDTH-1 downto 0);
    m_axi_matrix_c_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_MATRIX_C_WUSER_WIDTH-1 downto 0);
    m_axi_matrix_c_ARVALID : OUT STD_LOGIC;
    m_axi_matrix_c_ARREADY : IN STD_LOGIC;
    m_axi_matrix_c_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_MATRIX_C_ADDR_WIDTH-1 downto 0);
    m_axi_matrix_c_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_MATRIX_C_ID_WIDTH-1 downto 0);
    m_axi_matrix_c_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_matrix_c_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_matrix_c_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_matrix_c_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_matrix_c_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_matrix_c_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_matrix_c_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_matrix_c_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_matrix_c_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_MATRIX_C_ARUSER_WIDTH-1 downto 0);
    m_axi_matrix_c_RVALID : IN STD_LOGIC;
    m_axi_matrix_c_RREADY : OUT STD_LOGIC;
    m_axi_matrix_c_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_MATRIX_C_DATA_WIDTH-1 downto 0);
    m_axi_matrix_c_RLAST : IN STD_LOGIC;
    m_axi_matrix_c_RID : IN STD_LOGIC_VECTOR (C_M_AXI_MATRIX_C_ID_WIDTH-1 downto 0);
    m_axi_matrix_c_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_MATRIX_C_RUSER_WIDTH-1 downto 0);
    m_axi_matrix_c_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_matrix_c_BVALID : IN STD_LOGIC;
    m_axi_matrix_c_BREADY : OUT STD_LOGIC;
    m_axi_matrix_c_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_matrix_c_BID : IN STD_LOGIC_VECTOR (C_M_AXI_MATRIX_C_ID_WIDTH-1 downto 0);
    m_axi_matrix_c_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_MATRIX_C_BUSER_WIDTH-1 downto 0);
    s_axi_ctrl_AWVALID : IN STD_LOGIC;
    s_axi_ctrl_AWREADY : OUT STD_LOGIC;
    s_axi_ctrl_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_ADDR_WIDTH-1 downto 0);
    s_axi_ctrl_WVALID : IN STD_LOGIC;
    s_axi_ctrl_WREADY : OUT STD_LOGIC;
    s_axi_ctrl_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH-1 downto 0);
    s_axi_ctrl_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH/8-1 downto 0);
    s_axi_ctrl_ARVALID : IN STD_LOGIC;
    s_axi_ctrl_ARREADY : OUT STD_LOGIC;
    s_axi_ctrl_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_ADDR_WIDTH-1 downto 0);
    s_axi_ctrl_RVALID : OUT STD_LOGIC;
    s_axi_ctrl_RREADY : IN STD_LOGIC;
    s_axi_ctrl_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH-1 downto 0);
    s_axi_ctrl_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_ctrl_BVALID : OUT STD_LOGIC;
    s_axi_ctrl_BREADY : IN STD_LOGIC;
    s_axi_ctrl_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of MatrixMult_NoCache is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "MatrixMult_NoCache_MatrixMult_NoCache,hls_ip_2025_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.500000,HLS_SYN_LAT=8388651,HLS_SYN_TPT=none,HLS_SYN_MEM=10,HLS_SYN_DSP=0,HLS_SYN_FF=18787,HLS_SYN_LUT=8073,HLS_VERSION=2025_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant C_S_AXI_DATA_WIDTH : INTEGER := 32;
    constant C_M_AXI_DATA_WIDTH : INTEGER := 32;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal matrix_in_1 : STD_LOGIC_VECTOR (63 downto 0);
    signal matrix_in_2 : STD_LOGIC_VECTOR (63 downto 0);
    signal size : STD_LOGIC_VECTOR (15 downto 0);
    signal matrix_out : STD_LOGIC_VECTOR (63 downto 0);
    signal matrix_out_read_reg_153 : STD_LOGIC_VECTOR (63 downto 0);
    signal size_read_reg_158 : STD_LOGIC_VECTOR (15 downto 0);
    signal matrix_in_2_read_reg_163 : STD_LOGIC_VECTOR (63 downto 0);
    signal matrix_in_1_read_reg_168 : STD_LOGIC_VECTOR (63 downto 0);
    signal div_reg_173 : STD_LOGIC_VECTOR (13 downto 0);
    signal div_cast_fu_143_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_fu_146_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal mul_reg_184 : STD_LOGIC_VECTOR (27 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_a_0_AWVALID : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_a_0_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_a_0_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_a_0_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_a_0_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_a_0_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_a_0_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_a_0_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_a_0_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_a_0_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_a_0_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_a_0_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_a_0_WVALID : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_a_0_WDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_a_0_WSTRB : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_a_0_WLAST : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_a_0_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_a_0_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_a_0_ARVALID : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_a_0_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_a_0_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_a_0_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_a_0_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_a_0_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_a_0_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_a_0_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_a_0_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_a_0_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_a_0_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_a_0_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_a_0_RREADY : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_a_0_BREADY : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_b_0_AWVALID : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_b_0_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_b_0_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_b_0_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_b_0_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_b_0_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_b_0_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_b_0_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_b_0_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_b_0_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_b_0_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_b_0_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_b_0_WVALID : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_b_0_WDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_b_0_WSTRB : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_b_0_WLAST : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_b_0_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_b_0_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_b_0_ARVALID : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_b_0_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_b_0_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_b_0_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_b_0_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_b_0_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_b_0_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_b_0_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_b_0_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_b_0_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_b_0_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_b_0_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_b_0_RREADY : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_b_0_BREADY : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_c_0_AWVALID : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_c_0_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_c_0_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_c_0_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_c_0_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_c_0_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_c_0_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_c_0_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_c_0_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_c_0_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_c_0_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_c_0_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_c_0_WVALID : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_c_0_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_c_0_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_c_0_WLAST : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_c_0_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_c_0_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_c_0_ARVALID : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_c_0_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_c_0_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_c_0_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_c_0_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_c_0_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_c_0_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_c_0_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_c_0_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_c_0_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_c_0_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_c_0_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_c_0_RREADY : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_c_0_BREADY : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc_fu_108_ap_start : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc_fu_108_ap_done : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc_fu_108_ap_ready : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc_fu_108_ap_idle : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc_fu_108_ap_continue : STD_LOGIC;
    signal matrix_a_0_AWREADY : STD_LOGIC;
    signal matrix_a_0_WREADY : STD_LOGIC;
    signal matrix_a_0_ARVALID : STD_LOGIC;
    signal matrix_a_0_ARREADY : STD_LOGIC;
    signal matrix_a_0_RVALID : STD_LOGIC;
    signal matrix_a_0_RREADY : STD_LOGIC;
    signal matrix_a_0_RDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal matrix_a_0_RFIFONUM : STD_LOGIC_VECTOR (12 downto 0);
    signal matrix_a_0_BVALID : STD_LOGIC;
    signal matrix_b_0_AWREADY : STD_LOGIC;
    signal matrix_b_0_WREADY : STD_LOGIC;
    signal matrix_b_0_ARVALID : STD_LOGIC;
    signal matrix_b_0_ARREADY : STD_LOGIC;
    signal matrix_b_0_RVALID : STD_LOGIC;
    signal matrix_b_0_RREADY : STD_LOGIC;
    signal matrix_b_0_RDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal matrix_b_0_RFIFONUM : STD_LOGIC_VECTOR (12 downto 0);
    signal matrix_b_0_BVALID : STD_LOGIC;
    signal matrix_c_0_AWVALID : STD_LOGIC;
    signal matrix_c_0_AWREADY : STD_LOGIC;
    signal matrix_c_0_WVALID : STD_LOGIC;
    signal matrix_c_0_WREADY : STD_LOGIC;
    signal matrix_c_0_ARREADY : STD_LOGIC;
    signal matrix_c_0_RVALID : STD_LOGIC;
    signal matrix_c_0_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal matrix_c_0_RFIFONUM : STD_LOGIC_VECTOR (11 downto 0);
    signal matrix_c_0_BVALID : STD_LOGIC;
    signal matrix_c_0_BREADY : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc_fu_108_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_sync_reg_grp_dataflow_parent_loop_proc_fu_108_ap_ready : STD_LOGIC := '0';
    signal ap_sync_reg_grp_dataflow_parent_loop_proc_fu_108_ap_done : STD_LOGIC := '0';
    signal ap_block_state4_on_subcall_done : BOOLEAN;
    signal ap_sync_grp_dataflow_parent_loop_proc_fu_108_ap_ready : STD_LOGIC;
    signal grp_fu_146_p0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_146_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component MatrixMult_NoCache_dataflow_parent_loop_proc IS
    port (
        mul : IN STD_LOGIC_VECTOR (27 downto 0);
        size : IN STD_LOGIC_VECTOR (15 downto 0);
        m_axi_matrix_a_0_AWVALID : OUT STD_LOGIC;
        m_axi_matrix_a_0_AWREADY : IN STD_LOGIC;
        m_axi_matrix_a_0_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_matrix_a_0_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_matrix_a_0_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_matrix_a_0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_matrix_a_0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_matrix_a_0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_matrix_a_0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_matrix_a_0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_matrix_a_0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_matrix_a_0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_matrix_a_0_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_matrix_a_0_WVALID : OUT STD_LOGIC;
        m_axi_matrix_a_0_WREADY : IN STD_LOGIC;
        m_axi_matrix_a_0_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_axi_matrix_a_0_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_matrix_a_0_WLAST : OUT STD_LOGIC;
        m_axi_matrix_a_0_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_matrix_a_0_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_matrix_a_0_ARVALID : OUT STD_LOGIC;
        m_axi_matrix_a_0_ARREADY : IN STD_LOGIC;
        m_axi_matrix_a_0_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_matrix_a_0_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_matrix_a_0_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_matrix_a_0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_matrix_a_0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_matrix_a_0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_matrix_a_0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_matrix_a_0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_matrix_a_0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_matrix_a_0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_matrix_a_0_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_matrix_a_0_RVALID : IN STD_LOGIC;
        m_axi_matrix_a_0_RREADY : OUT STD_LOGIC;
        m_axi_matrix_a_0_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        m_axi_matrix_a_0_RLAST : IN STD_LOGIC;
        m_axi_matrix_a_0_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_matrix_a_0_RFIFONUM : IN STD_LOGIC_VECTOR (12 downto 0);
        m_axi_matrix_a_0_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_matrix_a_0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_matrix_a_0_BVALID : IN STD_LOGIC;
        m_axi_matrix_a_0_BREADY : OUT STD_LOGIC;
        m_axi_matrix_a_0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_matrix_a_0_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_matrix_a_0_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        matrix_in_1 : IN STD_LOGIC_VECTOR (63 downto 0);
        m_axi_matrix_b_0_AWVALID : OUT STD_LOGIC;
        m_axi_matrix_b_0_AWREADY : IN STD_LOGIC;
        m_axi_matrix_b_0_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_matrix_b_0_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_matrix_b_0_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_matrix_b_0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_matrix_b_0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_matrix_b_0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_matrix_b_0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_matrix_b_0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_matrix_b_0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_matrix_b_0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_matrix_b_0_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_matrix_b_0_WVALID : OUT STD_LOGIC;
        m_axi_matrix_b_0_WREADY : IN STD_LOGIC;
        m_axi_matrix_b_0_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_axi_matrix_b_0_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_matrix_b_0_WLAST : OUT STD_LOGIC;
        m_axi_matrix_b_0_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_matrix_b_0_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_matrix_b_0_ARVALID : OUT STD_LOGIC;
        m_axi_matrix_b_0_ARREADY : IN STD_LOGIC;
        m_axi_matrix_b_0_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_matrix_b_0_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_matrix_b_0_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_matrix_b_0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_matrix_b_0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_matrix_b_0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_matrix_b_0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_matrix_b_0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_matrix_b_0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_matrix_b_0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_matrix_b_0_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_matrix_b_0_RVALID : IN STD_LOGIC;
        m_axi_matrix_b_0_RREADY : OUT STD_LOGIC;
        m_axi_matrix_b_0_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        m_axi_matrix_b_0_RLAST : IN STD_LOGIC;
        m_axi_matrix_b_0_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_matrix_b_0_RFIFONUM : IN STD_LOGIC_VECTOR (12 downto 0);
        m_axi_matrix_b_0_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_matrix_b_0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_matrix_b_0_BVALID : IN STD_LOGIC;
        m_axi_matrix_b_0_BREADY : OUT STD_LOGIC;
        m_axi_matrix_b_0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_matrix_b_0_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_matrix_b_0_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        matrix_in_2 : IN STD_LOGIC_VECTOR (63 downto 0);
        m_axi_matrix_c_0_AWVALID : OUT STD_LOGIC;
        m_axi_matrix_c_0_AWREADY : IN STD_LOGIC;
        m_axi_matrix_c_0_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_matrix_c_0_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_matrix_c_0_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_matrix_c_0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_matrix_c_0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_matrix_c_0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_matrix_c_0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_matrix_c_0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_matrix_c_0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_matrix_c_0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_matrix_c_0_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_matrix_c_0_WVALID : OUT STD_LOGIC;
        m_axi_matrix_c_0_WREADY : IN STD_LOGIC;
        m_axi_matrix_c_0_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_matrix_c_0_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_matrix_c_0_WLAST : OUT STD_LOGIC;
        m_axi_matrix_c_0_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_matrix_c_0_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_matrix_c_0_ARVALID : OUT STD_LOGIC;
        m_axi_matrix_c_0_ARREADY : IN STD_LOGIC;
        m_axi_matrix_c_0_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_matrix_c_0_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_matrix_c_0_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_matrix_c_0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_matrix_c_0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_matrix_c_0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_matrix_c_0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_matrix_c_0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_matrix_c_0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_matrix_c_0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_matrix_c_0_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_matrix_c_0_RVALID : IN STD_LOGIC;
        m_axi_matrix_c_0_RREADY : OUT STD_LOGIC;
        m_axi_matrix_c_0_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_matrix_c_0_RLAST : IN STD_LOGIC;
        m_axi_matrix_c_0_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_matrix_c_0_RFIFONUM : IN STD_LOGIC_VECTOR (11 downto 0);
        m_axi_matrix_c_0_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_matrix_c_0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_matrix_c_0_BVALID : IN STD_LOGIC;
        m_axi_matrix_c_0_BREADY : OUT STD_LOGIC;
        m_axi_matrix_c_0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_matrix_c_0_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_matrix_c_0_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        matrix_out : IN STD_LOGIC_VECTOR (63 downto 0);
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        size_ap_vld : IN STD_LOGIC;
        matrix_in_1_ap_vld : IN STD_LOGIC;
        matrix_in_2_ap_vld : IN STD_LOGIC;
        matrix_out_ap_vld : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;


    component MatrixMult_NoCache_mul_14ns_14ns_28_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (13 downto 0);
        din1 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (27 downto 0) );
    end component;


    component MatrixMult_NoCache_ctrl_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        matrix_in_1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        matrix_in_2 : OUT STD_LOGIC_VECTOR (63 downto 0);
        size : OUT STD_LOGIC_VECTOR (15 downto 0);
        matrix_out : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component MatrixMult_NoCache_matrix_a_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        CH0_NUM_READ_OUTSTANDING : INTEGER;
        CH0_NUM_WRITE_OUTSTANDING : INTEGER;
        CH0_USER_RFIFONUM_WIDTH : INTEGER;
        CH0_USER_DW : INTEGER;
        CH0_USER_AW : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_CH0_ARVALID : IN STD_LOGIC;
        I_CH0_ARREADY : OUT STD_LOGIC;
        I_CH0_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_CH0_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_CH0_RVALID : OUT STD_LOGIC;
        I_CH0_RREADY : IN STD_LOGIC;
        I_CH0_RDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        I_CH0_RFIFONUM : OUT STD_LOGIC_VECTOR (12 downto 0);
        I_CH0_AWVALID : IN STD_LOGIC;
        I_CH0_AWREADY : OUT STD_LOGIC;
        I_CH0_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_CH0_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_CH0_WVALID : IN STD_LOGIC;
        I_CH0_WREADY : OUT STD_LOGIC;
        I_CH0_WDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        I_CH0_WSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
        I_CH0_BVALID : OUT STD_LOGIC;
        I_CH0_BREADY : IN STD_LOGIC );
    end component;


    component MatrixMult_NoCache_matrix_b_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        CH0_NUM_READ_OUTSTANDING : INTEGER;
        CH0_NUM_WRITE_OUTSTANDING : INTEGER;
        CH0_USER_RFIFONUM_WIDTH : INTEGER;
        CH0_USER_DW : INTEGER;
        CH0_USER_AW : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_CH0_ARVALID : IN STD_LOGIC;
        I_CH0_ARREADY : OUT STD_LOGIC;
        I_CH0_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_CH0_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_CH0_RVALID : OUT STD_LOGIC;
        I_CH0_RREADY : IN STD_LOGIC;
        I_CH0_RDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        I_CH0_RFIFONUM : OUT STD_LOGIC_VECTOR (12 downto 0);
        I_CH0_AWVALID : IN STD_LOGIC;
        I_CH0_AWREADY : OUT STD_LOGIC;
        I_CH0_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_CH0_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_CH0_WVALID : IN STD_LOGIC;
        I_CH0_WREADY : OUT STD_LOGIC;
        I_CH0_WDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        I_CH0_WSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
        I_CH0_BVALID : OUT STD_LOGIC;
        I_CH0_BREADY : IN STD_LOGIC );
    end component;


    component MatrixMult_NoCache_matrix_c_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        CH0_NUM_READ_OUTSTANDING : INTEGER;
        CH0_NUM_WRITE_OUTSTANDING : INTEGER;
        CH0_USER_RFIFONUM_WIDTH : INTEGER;
        CH0_USER_DW : INTEGER;
        CH0_USER_AW : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_CH0_ARVALID : IN STD_LOGIC;
        I_CH0_ARREADY : OUT STD_LOGIC;
        I_CH0_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_CH0_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_CH0_RVALID : OUT STD_LOGIC;
        I_CH0_RREADY : IN STD_LOGIC;
        I_CH0_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_CH0_RFIFONUM : OUT STD_LOGIC_VECTOR (11 downto 0);
        I_CH0_AWVALID : IN STD_LOGIC;
        I_CH0_AWREADY : OUT STD_LOGIC;
        I_CH0_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_CH0_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_CH0_WVALID : IN STD_LOGIC;
        I_CH0_WREADY : OUT STD_LOGIC;
        I_CH0_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_CH0_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_CH0_BVALID : OUT STD_LOGIC;
        I_CH0_BREADY : IN STD_LOGIC );
    end component;



begin
    grp_dataflow_parent_loop_proc_fu_108 : component MatrixMult_NoCache_dataflow_parent_loop_proc
    port map (
        mul => mul_reg_184,
        size => size_read_reg_158,
        m_axi_matrix_a_0_AWVALID => grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_a_0_AWVALID,
        m_axi_matrix_a_0_AWREADY => ap_const_logic_0,
        m_axi_matrix_a_0_AWADDR => grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_a_0_AWADDR,
        m_axi_matrix_a_0_AWID => grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_a_0_AWID,
        m_axi_matrix_a_0_AWLEN => grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_a_0_AWLEN,
        m_axi_matrix_a_0_AWSIZE => grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_a_0_AWSIZE,
        m_axi_matrix_a_0_AWBURST => grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_a_0_AWBURST,
        m_axi_matrix_a_0_AWLOCK => grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_a_0_AWLOCK,
        m_axi_matrix_a_0_AWCACHE => grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_a_0_AWCACHE,
        m_axi_matrix_a_0_AWPROT => grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_a_0_AWPROT,
        m_axi_matrix_a_0_AWQOS => grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_a_0_AWQOS,
        m_axi_matrix_a_0_AWREGION => grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_a_0_AWREGION,
        m_axi_matrix_a_0_AWUSER => grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_a_0_AWUSER,
        m_axi_matrix_a_0_WVALID => grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_a_0_WVALID,
        m_axi_matrix_a_0_WREADY => ap_const_logic_0,
        m_axi_matrix_a_0_WDATA => grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_a_0_WDATA,
        m_axi_matrix_a_0_WSTRB => grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_a_0_WSTRB,
        m_axi_matrix_a_0_WLAST => grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_a_0_WLAST,
        m_axi_matrix_a_0_WID => grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_a_0_WID,
        m_axi_matrix_a_0_WUSER => grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_a_0_WUSER,
        m_axi_matrix_a_0_ARVALID => grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_a_0_ARVALID,
        m_axi_matrix_a_0_ARREADY => matrix_a_0_ARREADY,
        m_axi_matrix_a_0_ARADDR => grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_a_0_ARADDR,
        m_axi_matrix_a_0_ARID => grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_a_0_ARID,
        m_axi_matrix_a_0_ARLEN => grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_a_0_ARLEN,
        m_axi_matrix_a_0_ARSIZE => grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_a_0_ARSIZE,
        m_axi_matrix_a_0_ARBURST => grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_a_0_ARBURST,
        m_axi_matrix_a_0_ARLOCK => grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_a_0_ARLOCK,
        m_axi_matrix_a_0_ARCACHE => grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_a_0_ARCACHE,
        m_axi_matrix_a_0_ARPROT => grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_a_0_ARPROT,
        m_axi_matrix_a_0_ARQOS => grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_a_0_ARQOS,
        m_axi_matrix_a_0_ARREGION => grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_a_0_ARREGION,
        m_axi_matrix_a_0_ARUSER => grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_a_0_ARUSER,
        m_axi_matrix_a_0_RVALID => matrix_a_0_RVALID,
        m_axi_matrix_a_0_RREADY => grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_a_0_RREADY,
        m_axi_matrix_a_0_RDATA => matrix_a_0_RDATA,
        m_axi_matrix_a_0_RLAST => ap_const_logic_0,
        m_axi_matrix_a_0_RID => ap_const_lv1_0,
        m_axi_matrix_a_0_RFIFONUM => matrix_a_0_RFIFONUM,
        m_axi_matrix_a_0_RUSER => ap_const_lv1_0,
        m_axi_matrix_a_0_RRESP => ap_const_lv2_0,
        m_axi_matrix_a_0_BVALID => ap_const_logic_0,
        m_axi_matrix_a_0_BREADY => grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_a_0_BREADY,
        m_axi_matrix_a_0_BRESP => ap_const_lv2_0,
        m_axi_matrix_a_0_BID => ap_const_lv1_0,
        m_axi_matrix_a_0_BUSER => ap_const_lv1_0,
        matrix_in_1 => matrix_in_1_read_reg_168,
        m_axi_matrix_b_0_AWVALID => grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_b_0_AWVALID,
        m_axi_matrix_b_0_AWREADY => ap_const_logic_0,
        m_axi_matrix_b_0_AWADDR => grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_b_0_AWADDR,
        m_axi_matrix_b_0_AWID => grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_b_0_AWID,
        m_axi_matrix_b_0_AWLEN => grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_b_0_AWLEN,
        m_axi_matrix_b_0_AWSIZE => grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_b_0_AWSIZE,
        m_axi_matrix_b_0_AWBURST => grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_b_0_AWBURST,
        m_axi_matrix_b_0_AWLOCK => grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_b_0_AWLOCK,
        m_axi_matrix_b_0_AWCACHE => grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_b_0_AWCACHE,
        m_axi_matrix_b_0_AWPROT => grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_b_0_AWPROT,
        m_axi_matrix_b_0_AWQOS => grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_b_0_AWQOS,
        m_axi_matrix_b_0_AWREGION => grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_b_0_AWREGION,
        m_axi_matrix_b_0_AWUSER => grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_b_0_AWUSER,
        m_axi_matrix_b_0_WVALID => grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_b_0_WVALID,
        m_axi_matrix_b_0_WREADY => ap_const_logic_0,
        m_axi_matrix_b_0_WDATA => grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_b_0_WDATA,
        m_axi_matrix_b_0_WSTRB => grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_b_0_WSTRB,
        m_axi_matrix_b_0_WLAST => grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_b_0_WLAST,
        m_axi_matrix_b_0_WID => grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_b_0_WID,
        m_axi_matrix_b_0_WUSER => grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_b_0_WUSER,
        m_axi_matrix_b_0_ARVALID => grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_b_0_ARVALID,
        m_axi_matrix_b_0_ARREADY => matrix_b_0_ARREADY,
        m_axi_matrix_b_0_ARADDR => grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_b_0_ARADDR,
        m_axi_matrix_b_0_ARID => grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_b_0_ARID,
        m_axi_matrix_b_0_ARLEN => grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_b_0_ARLEN,
        m_axi_matrix_b_0_ARSIZE => grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_b_0_ARSIZE,
        m_axi_matrix_b_0_ARBURST => grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_b_0_ARBURST,
        m_axi_matrix_b_0_ARLOCK => grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_b_0_ARLOCK,
        m_axi_matrix_b_0_ARCACHE => grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_b_0_ARCACHE,
        m_axi_matrix_b_0_ARPROT => grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_b_0_ARPROT,
        m_axi_matrix_b_0_ARQOS => grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_b_0_ARQOS,
        m_axi_matrix_b_0_ARREGION => grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_b_0_ARREGION,
        m_axi_matrix_b_0_ARUSER => grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_b_0_ARUSER,
        m_axi_matrix_b_0_RVALID => matrix_b_0_RVALID,
        m_axi_matrix_b_0_RREADY => grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_b_0_RREADY,
        m_axi_matrix_b_0_RDATA => matrix_b_0_RDATA,
        m_axi_matrix_b_0_RLAST => ap_const_logic_0,
        m_axi_matrix_b_0_RID => ap_const_lv1_0,
        m_axi_matrix_b_0_RFIFONUM => matrix_b_0_RFIFONUM,
        m_axi_matrix_b_0_RUSER => ap_const_lv1_0,
        m_axi_matrix_b_0_RRESP => ap_const_lv2_0,
        m_axi_matrix_b_0_BVALID => ap_const_logic_0,
        m_axi_matrix_b_0_BREADY => grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_b_0_BREADY,
        m_axi_matrix_b_0_BRESP => ap_const_lv2_0,
        m_axi_matrix_b_0_BID => ap_const_lv1_0,
        m_axi_matrix_b_0_BUSER => ap_const_lv1_0,
        matrix_in_2 => matrix_in_2_read_reg_163,
        m_axi_matrix_c_0_AWVALID => grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_c_0_AWVALID,
        m_axi_matrix_c_0_AWREADY => matrix_c_0_AWREADY,
        m_axi_matrix_c_0_AWADDR => grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_c_0_AWADDR,
        m_axi_matrix_c_0_AWID => grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_c_0_AWID,
        m_axi_matrix_c_0_AWLEN => grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_c_0_AWLEN,
        m_axi_matrix_c_0_AWSIZE => grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_c_0_AWSIZE,
        m_axi_matrix_c_0_AWBURST => grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_c_0_AWBURST,
        m_axi_matrix_c_0_AWLOCK => grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_c_0_AWLOCK,
        m_axi_matrix_c_0_AWCACHE => grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_c_0_AWCACHE,
        m_axi_matrix_c_0_AWPROT => grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_c_0_AWPROT,
        m_axi_matrix_c_0_AWQOS => grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_c_0_AWQOS,
        m_axi_matrix_c_0_AWREGION => grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_c_0_AWREGION,
        m_axi_matrix_c_0_AWUSER => grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_c_0_AWUSER,
        m_axi_matrix_c_0_WVALID => grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_c_0_WVALID,
        m_axi_matrix_c_0_WREADY => matrix_c_0_WREADY,
        m_axi_matrix_c_0_WDATA => grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_c_0_WDATA,
        m_axi_matrix_c_0_WSTRB => grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_c_0_WSTRB,
        m_axi_matrix_c_0_WLAST => grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_c_0_WLAST,
        m_axi_matrix_c_0_WID => grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_c_0_WID,
        m_axi_matrix_c_0_WUSER => grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_c_0_WUSER,
        m_axi_matrix_c_0_ARVALID => grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_c_0_ARVALID,
        m_axi_matrix_c_0_ARREADY => ap_const_logic_0,
        m_axi_matrix_c_0_ARADDR => grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_c_0_ARADDR,
        m_axi_matrix_c_0_ARID => grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_c_0_ARID,
        m_axi_matrix_c_0_ARLEN => grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_c_0_ARLEN,
        m_axi_matrix_c_0_ARSIZE => grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_c_0_ARSIZE,
        m_axi_matrix_c_0_ARBURST => grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_c_0_ARBURST,
        m_axi_matrix_c_0_ARLOCK => grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_c_0_ARLOCK,
        m_axi_matrix_c_0_ARCACHE => grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_c_0_ARCACHE,
        m_axi_matrix_c_0_ARPROT => grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_c_0_ARPROT,
        m_axi_matrix_c_0_ARQOS => grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_c_0_ARQOS,
        m_axi_matrix_c_0_ARREGION => grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_c_0_ARREGION,
        m_axi_matrix_c_0_ARUSER => grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_c_0_ARUSER,
        m_axi_matrix_c_0_RVALID => ap_const_logic_0,
        m_axi_matrix_c_0_RREADY => grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_c_0_RREADY,
        m_axi_matrix_c_0_RDATA => ap_const_lv32_0,
        m_axi_matrix_c_0_RLAST => ap_const_logic_0,
        m_axi_matrix_c_0_RID => ap_const_lv1_0,
        m_axi_matrix_c_0_RFIFONUM => ap_const_lv12_0,
        m_axi_matrix_c_0_RUSER => ap_const_lv1_0,
        m_axi_matrix_c_0_RRESP => ap_const_lv2_0,
        m_axi_matrix_c_0_BVALID => matrix_c_0_BVALID,
        m_axi_matrix_c_0_BREADY => grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_c_0_BREADY,
        m_axi_matrix_c_0_BRESP => ap_const_lv2_0,
        m_axi_matrix_c_0_BID => ap_const_lv1_0,
        m_axi_matrix_c_0_BUSER => ap_const_lv1_0,
        matrix_out => matrix_out_read_reg_153,
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        size_ap_vld => ap_const_logic_1,
        matrix_in_1_ap_vld => ap_const_logic_1,
        matrix_in_2_ap_vld => ap_const_logic_1,
        matrix_out_ap_vld => ap_const_logic_1,
        ap_start => grp_dataflow_parent_loop_proc_fu_108_ap_start,
        ap_done => grp_dataflow_parent_loop_proc_fu_108_ap_done,
        ap_ready => grp_dataflow_parent_loop_proc_fu_108_ap_ready,
        ap_idle => grp_dataflow_parent_loop_proc_fu_108_ap_idle,
        ap_continue => grp_dataflow_parent_loop_proc_fu_108_ap_continue);

    ctrl_s_axi_U : component MatrixMult_NoCache_ctrl_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CTRL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CTRL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_ctrl_AWVALID,
        AWREADY => s_axi_ctrl_AWREADY,
        AWADDR => s_axi_ctrl_AWADDR,
        WVALID => s_axi_ctrl_WVALID,
        WREADY => s_axi_ctrl_WREADY,
        WDATA => s_axi_ctrl_WDATA,
        WSTRB => s_axi_ctrl_WSTRB,
        ARVALID => s_axi_ctrl_ARVALID,
        ARREADY => s_axi_ctrl_ARREADY,
        ARADDR => s_axi_ctrl_ARADDR,
        RVALID => s_axi_ctrl_RVALID,
        RREADY => s_axi_ctrl_RREADY,
        RDATA => s_axi_ctrl_RDATA,
        RRESP => s_axi_ctrl_RRESP,
        BVALID => s_axi_ctrl_BVALID,
        BREADY => s_axi_ctrl_BREADY,
        BRESP => s_axi_ctrl_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        matrix_in_1 => matrix_in_1,
        matrix_in_2 => matrix_in_2,
        size => size,
        matrix_out => matrix_out,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    matrix_a_m_axi_U : component MatrixMult_NoCache_matrix_a_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 7,
        MAX_READ_BURST_LENGTH => 128,
        MAX_WRITE_BURST_LENGTH => 128,
        C_M_AXI_ID_WIDTH => C_M_AXI_MATRIX_A_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_MATRIX_A_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_MATRIX_A_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_MATRIX_A_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_MATRIX_A_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_MATRIX_A_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_MATRIX_A_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_MATRIX_A_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_MATRIX_A_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_MATRIX_A_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_MATRIX_A_CACHE_VALUE,
        CH0_NUM_READ_OUTSTANDING => 16,
        CH0_NUM_WRITE_OUTSTANDING => 16,
        CH0_USER_RFIFONUM_WIDTH => 13,
        CH0_USER_DW => 16,
        CH0_USER_AW => 64,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 0)
    port map (
        AWVALID => m_axi_matrix_a_AWVALID,
        AWREADY => m_axi_matrix_a_AWREADY,
        AWADDR => m_axi_matrix_a_AWADDR,
        AWID => m_axi_matrix_a_AWID,
        AWLEN => m_axi_matrix_a_AWLEN,
        AWSIZE => m_axi_matrix_a_AWSIZE,
        AWBURST => m_axi_matrix_a_AWBURST,
        AWLOCK => m_axi_matrix_a_AWLOCK,
        AWCACHE => m_axi_matrix_a_AWCACHE,
        AWPROT => m_axi_matrix_a_AWPROT,
        AWQOS => m_axi_matrix_a_AWQOS,
        AWREGION => m_axi_matrix_a_AWREGION,
        AWUSER => m_axi_matrix_a_AWUSER,
        WVALID => m_axi_matrix_a_WVALID,
        WREADY => m_axi_matrix_a_WREADY,
        WDATA => m_axi_matrix_a_WDATA,
        WSTRB => m_axi_matrix_a_WSTRB,
        WLAST => m_axi_matrix_a_WLAST,
        WID => m_axi_matrix_a_WID,
        WUSER => m_axi_matrix_a_WUSER,
        ARVALID => m_axi_matrix_a_ARVALID,
        ARREADY => m_axi_matrix_a_ARREADY,
        ARADDR => m_axi_matrix_a_ARADDR,
        ARID => m_axi_matrix_a_ARID,
        ARLEN => m_axi_matrix_a_ARLEN,
        ARSIZE => m_axi_matrix_a_ARSIZE,
        ARBURST => m_axi_matrix_a_ARBURST,
        ARLOCK => m_axi_matrix_a_ARLOCK,
        ARCACHE => m_axi_matrix_a_ARCACHE,
        ARPROT => m_axi_matrix_a_ARPROT,
        ARQOS => m_axi_matrix_a_ARQOS,
        ARREGION => m_axi_matrix_a_ARREGION,
        ARUSER => m_axi_matrix_a_ARUSER,
        RVALID => m_axi_matrix_a_RVALID,
        RREADY => m_axi_matrix_a_RREADY,
        RDATA => m_axi_matrix_a_RDATA,
        RLAST => m_axi_matrix_a_RLAST,
        RID => m_axi_matrix_a_RID,
        RUSER => m_axi_matrix_a_RUSER,
        RRESP => m_axi_matrix_a_RRESP,
        BVALID => m_axi_matrix_a_BVALID,
        BREADY => m_axi_matrix_a_BREADY,
        BRESP => m_axi_matrix_a_BRESP,
        BID => m_axi_matrix_a_BID,
        BUSER => m_axi_matrix_a_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_CH0_ARVALID => matrix_a_0_ARVALID,
        I_CH0_ARREADY => matrix_a_0_ARREADY,
        I_CH0_ARADDR => grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_a_0_ARADDR,
        I_CH0_ARLEN => grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_a_0_ARLEN,
        I_CH0_RVALID => matrix_a_0_RVALID,
        I_CH0_RREADY => matrix_a_0_RREADY,
        I_CH0_RDATA => matrix_a_0_RDATA,
        I_CH0_RFIFONUM => matrix_a_0_RFIFONUM,
        I_CH0_AWVALID => ap_const_logic_0,
        I_CH0_AWREADY => matrix_a_0_AWREADY,
        I_CH0_AWADDR => ap_const_lv64_0,
        I_CH0_AWLEN => ap_const_lv32_0,
        I_CH0_WVALID => ap_const_logic_0,
        I_CH0_WREADY => matrix_a_0_WREADY,
        I_CH0_WDATA => ap_const_lv16_0,
        I_CH0_WSTRB => ap_const_lv2_0,
        I_CH0_BVALID => matrix_a_0_BVALID,
        I_CH0_BREADY => ap_const_logic_0);

    matrix_b_m_axi_U : component MatrixMult_NoCache_matrix_b_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 7,
        MAX_READ_BURST_LENGTH => 128,
        MAX_WRITE_BURST_LENGTH => 128,
        C_M_AXI_ID_WIDTH => C_M_AXI_MATRIX_B_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_MATRIX_B_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_MATRIX_B_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_MATRIX_B_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_MATRIX_B_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_MATRIX_B_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_MATRIX_B_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_MATRIX_B_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_MATRIX_B_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_MATRIX_B_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_MATRIX_B_CACHE_VALUE,
        CH0_NUM_READ_OUTSTANDING => 16,
        CH0_NUM_WRITE_OUTSTANDING => 16,
        CH0_USER_RFIFONUM_WIDTH => 13,
        CH0_USER_DW => 16,
        CH0_USER_AW => 64,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 0)
    port map (
        AWVALID => m_axi_matrix_b_AWVALID,
        AWREADY => m_axi_matrix_b_AWREADY,
        AWADDR => m_axi_matrix_b_AWADDR,
        AWID => m_axi_matrix_b_AWID,
        AWLEN => m_axi_matrix_b_AWLEN,
        AWSIZE => m_axi_matrix_b_AWSIZE,
        AWBURST => m_axi_matrix_b_AWBURST,
        AWLOCK => m_axi_matrix_b_AWLOCK,
        AWCACHE => m_axi_matrix_b_AWCACHE,
        AWPROT => m_axi_matrix_b_AWPROT,
        AWQOS => m_axi_matrix_b_AWQOS,
        AWREGION => m_axi_matrix_b_AWREGION,
        AWUSER => m_axi_matrix_b_AWUSER,
        WVALID => m_axi_matrix_b_WVALID,
        WREADY => m_axi_matrix_b_WREADY,
        WDATA => m_axi_matrix_b_WDATA,
        WSTRB => m_axi_matrix_b_WSTRB,
        WLAST => m_axi_matrix_b_WLAST,
        WID => m_axi_matrix_b_WID,
        WUSER => m_axi_matrix_b_WUSER,
        ARVALID => m_axi_matrix_b_ARVALID,
        ARREADY => m_axi_matrix_b_ARREADY,
        ARADDR => m_axi_matrix_b_ARADDR,
        ARID => m_axi_matrix_b_ARID,
        ARLEN => m_axi_matrix_b_ARLEN,
        ARSIZE => m_axi_matrix_b_ARSIZE,
        ARBURST => m_axi_matrix_b_ARBURST,
        ARLOCK => m_axi_matrix_b_ARLOCK,
        ARCACHE => m_axi_matrix_b_ARCACHE,
        ARPROT => m_axi_matrix_b_ARPROT,
        ARQOS => m_axi_matrix_b_ARQOS,
        ARREGION => m_axi_matrix_b_ARREGION,
        ARUSER => m_axi_matrix_b_ARUSER,
        RVALID => m_axi_matrix_b_RVALID,
        RREADY => m_axi_matrix_b_RREADY,
        RDATA => m_axi_matrix_b_RDATA,
        RLAST => m_axi_matrix_b_RLAST,
        RID => m_axi_matrix_b_RID,
        RUSER => m_axi_matrix_b_RUSER,
        RRESP => m_axi_matrix_b_RRESP,
        BVALID => m_axi_matrix_b_BVALID,
        BREADY => m_axi_matrix_b_BREADY,
        BRESP => m_axi_matrix_b_BRESP,
        BID => m_axi_matrix_b_BID,
        BUSER => m_axi_matrix_b_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_CH0_ARVALID => matrix_b_0_ARVALID,
        I_CH0_ARREADY => matrix_b_0_ARREADY,
        I_CH0_ARADDR => grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_b_0_ARADDR,
        I_CH0_ARLEN => grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_b_0_ARLEN,
        I_CH0_RVALID => matrix_b_0_RVALID,
        I_CH0_RREADY => matrix_b_0_RREADY,
        I_CH0_RDATA => matrix_b_0_RDATA,
        I_CH0_RFIFONUM => matrix_b_0_RFIFONUM,
        I_CH0_AWVALID => ap_const_logic_0,
        I_CH0_AWREADY => matrix_b_0_AWREADY,
        I_CH0_AWADDR => ap_const_lv64_0,
        I_CH0_AWLEN => ap_const_lv32_0,
        I_CH0_WVALID => ap_const_logic_0,
        I_CH0_WREADY => matrix_b_0_WREADY,
        I_CH0_WDATA => ap_const_lv16_0,
        I_CH0_WSTRB => ap_const_lv2_0,
        I_CH0_BVALID => matrix_b_0_BVALID,
        I_CH0_BREADY => ap_const_logic_0);

    matrix_c_m_axi_U : component MatrixMult_NoCache_matrix_c_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 4,
        MAX_READ_BURST_LENGTH => 128,
        MAX_WRITE_BURST_LENGTH => 128,
        C_M_AXI_ID_WIDTH => C_M_AXI_MATRIX_C_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_MATRIX_C_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_MATRIX_C_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_MATRIX_C_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_MATRIX_C_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_MATRIX_C_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_MATRIX_C_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_MATRIX_C_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_MATRIX_C_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_MATRIX_C_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_MATRIX_C_CACHE_VALUE,
        CH0_NUM_READ_OUTSTANDING => 16,
        CH0_NUM_WRITE_OUTSTANDING => 16,
        CH0_USER_RFIFONUM_WIDTH => 12,
        CH0_USER_DW => 32,
        CH0_USER_AW => 64,
        NUM_READ_OUTSTANDING => 0,
        NUM_WRITE_OUTSTANDING => 16)
    port map (
        AWVALID => m_axi_matrix_c_AWVALID,
        AWREADY => m_axi_matrix_c_AWREADY,
        AWADDR => m_axi_matrix_c_AWADDR,
        AWID => m_axi_matrix_c_AWID,
        AWLEN => m_axi_matrix_c_AWLEN,
        AWSIZE => m_axi_matrix_c_AWSIZE,
        AWBURST => m_axi_matrix_c_AWBURST,
        AWLOCK => m_axi_matrix_c_AWLOCK,
        AWCACHE => m_axi_matrix_c_AWCACHE,
        AWPROT => m_axi_matrix_c_AWPROT,
        AWQOS => m_axi_matrix_c_AWQOS,
        AWREGION => m_axi_matrix_c_AWREGION,
        AWUSER => m_axi_matrix_c_AWUSER,
        WVALID => m_axi_matrix_c_WVALID,
        WREADY => m_axi_matrix_c_WREADY,
        WDATA => m_axi_matrix_c_WDATA,
        WSTRB => m_axi_matrix_c_WSTRB,
        WLAST => m_axi_matrix_c_WLAST,
        WID => m_axi_matrix_c_WID,
        WUSER => m_axi_matrix_c_WUSER,
        ARVALID => m_axi_matrix_c_ARVALID,
        ARREADY => m_axi_matrix_c_ARREADY,
        ARADDR => m_axi_matrix_c_ARADDR,
        ARID => m_axi_matrix_c_ARID,
        ARLEN => m_axi_matrix_c_ARLEN,
        ARSIZE => m_axi_matrix_c_ARSIZE,
        ARBURST => m_axi_matrix_c_ARBURST,
        ARLOCK => m_axi_matrix_c_ARLOCK,
        ARCACHE => m_axi_matrix_c_ARCACHE,
        ARPROT => m_axi_matrix_c_ARPROT,
        ARQOS => m_axi_matrix_c_ARQOS,
        ARREGION => m_axi_matrix_c_ARREGION,
        ARUSER => m_axi_matrix_c_ARUSER,
        RVALID => m_axi_matrix_c_RVALID,
        RREADY => m_axi_matrix_c_RREADY,
        RDATA => m_axi_matrix_c_RDATA,
        RLAST => m_axi_matrix_c_RLAST,
        RID => m_axi_matrix_c_RID,
        RUSER => m_axi_matrix_c_RUSER,
        RRESP => m_axi_matrix_c_RRESP,
        BVALID => m_axi_matrix_c_BVALID,
        BREADY => m_axi_matrix_c_BREADY,
        BRESP => m_axi_matrix_c_BRESP,
        BID => m_axi_matrix_c_BID,
        BUSER => m_axi_matrix_c_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_CH0_ARVALID => ap_const_logic_0,
        I_CH0_ARREADY => matrix_c_0_ARREADY,
        I_CH0_ARADDR => ap_const_lv64_0,
        I_CH0_ARLEN => ap_const_lv32_0,
        I_CH0_RVALID => matrix_c_0_RVALID,
        I_CH0_RREADY => ap_const_logic_0,
        I_CH0_RDATA => matrix_c_0_RDATA,
        I_CH0_RFIFONUM => matrix_c_0_RFIFONUM,
        I_CH0_AWVALID => matrix_c_0_AWVALID,
        I_CH0_AWREADY => matrix_c_0_AWREADY,
        I_CH0_AWADDR => grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_c_0_AWADDR,
        I_CH0_AWLEN => grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_c_0_AWLEN,
        I_CH0_WVALID => matrix_c_0_WVALID,
        I_CH0_WREADY => matrix_c_0_WREADY,
        I_CH0_WDATA => grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_c_0_WDATA,
        I_CH0_WSTRB => grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_c_0_WSTRB,
        I_CH0_BVALID => matrix_c_0_BVALID,
        I_CH0_BREADY => matrix_c_0_BREADY);

    mul_14ns_14ns_28_2_1_U235 : component MatrixMult_NoCache_mul_14ns_14ns_28_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 14,
        din1_WIDTH => 14,
        dout_WIDTH => 28)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_146_p0,
        din1 => grp_fu_146_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_146_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_sync_reg_grp_dataflow_parent_loop_proc_fu_108_ap_done_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_grp_dataflow_parent_loop_proc_fu_108_ap_done <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_state4_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                    ap_sync_reg_grp_dataflow_parent_loop_proc_fu_108_ap_done <= ap_const_logic_0;
                elsif ((grp_dataflow_parent_loop_proc_fu_108_ap_done = ap_const_logic_1)) then 
                    ap_sync_reg_grp_dataflow_parent_loop_proc_fu_108_ap_done <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_grp_dataflow_parent_loop_proc_fu_108_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_grp_dataflow_parent_loop_proc_fu_108_ap_ready <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_state4_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                    ap_sync_reg_grp_dataflow_parent_loop_proc_fu_108_ap_ready <= ap_const_logic_0;
                elsif ((grp_dataflow_parent_loop_proc_fu_108_ap_ready = ap_const_logic_1)) then 
                    ap_sync_reg_grp_dataflow_parent_loop_proc_fu_108_ap_ready <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_dataflow_parent_loop_proc_fu_108_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_dataflow_parent_loop_proc_fu_108_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_sync_grp_dataflow_parent_loop_proc_fu_108_ap_ready = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
                    grp_dataflow_parent_loop_proc_fu_108_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_dataflow_parent_loop_proc_fu_108_ap_ready = ap_const_logic_1)) then 
                    grp_dataflow_parent_loop_proc_fu_108_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                div_reg_173 <= size(15 downto 2);
                matrix_in_1_read_reg_168 <= matrix_in_1;
                matrix_in_2_read_reg_163 <= matrix_in_2;
                matrix_out_read_reg_153 <= matrix_out;
                size_read_reg_158 <= size;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                mul_reg_184 <= grp_fu_146_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state4, ap_block_state4_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_boolean_0 = ap_block_state4_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;

    ap_ST_fsm_state4_blk_assign_proc : process(ap_block_state4_on_subcall_done)
    begin
        if ((ap_const_boolean_1 = ap_block_state4_on_subcall_done)) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state4_on_subcall_done_assign_proc : process(ap_sync_reg_grp_dataflow_parent_loop_proc_fu_108_ap_ready, ap_sync_reg_grp_dataflow_parent_loop_proc_fu_108_ap_done)
    begin
                ap_block_state4_on_subcall_done <= ((ap_sync_reg_grp_dataflow_parent_loop_proc_fu_108_ap_ready and ap_sync_reg_grp_dataflow_parent_loop_proc_fu_108_ap_done) = ap_const_logic_0);
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state4, ap_block_state4_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state4_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state4, ap_block_state4_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state4_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_grp_dataflow_parent_loop_proc_fu_108_ap_ready <= (grp_dataflow_parent_loop_proc_fu_108_ap_ready or ap_sync_reg_grp_dataflow_parent_loop_proc_fu_108_ap_ready);
    div_cast_fu_143_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(div_reg_173),28));

    grp_dataflow_parent_loop_proc_fu_108_ap_continue_assign_proc : process(ap_CS_fsm_state4, ap_block_state4_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state4_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            grp_dataflow_parent_loop_proc_fu_108_ap_continue <= ap_const_logic_1;
        else 
            grp_dataflow_parent_loop_proc_fu_108_ap_continue <= ap_const_logic_0;
        end if; 
    end process;

    grp_dataflow_parent_loop_proc_fu_108_ap_start <= grp_dataflow_parent_loop_proc_fu_108_ap_start_reg;
    grp_fu_146_p0 <= div_cast_fu_143_p1(14 - 1 downto 0);
    grp_fu_146_p1 <= div_cast_fu_143_p1(14 - 1 downto 0);

    matrix_a_0_ARVALID_assign_proc : process(ap_CS_fsm_state3, grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_a_0_ARVALID, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            matrix_a_0_ARVALID <= grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_a_0_ARVALID;
        else 
            matrix_a_0_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    matrix_a_0_RREADY_assign_proc : process(ap_CS_fsm_state3, grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_a_0_RREADY, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            matrix_a_0_RREADY <= grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_a_0_RREADY;
        else 
            matrix_a_0_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    matrix_b_0_ARVALID_assign_proc : process(ap_CS_fsm_state3, grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_b_0_ARVALID, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            matrix_b_0_ARVALID <= grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_b_0_ARVALID;
        else 
            matrix_b_0_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    matrix_b_0_RREADY_assign_proc : process(ap_CS_fsm_state3, grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_b_0_RREADY, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            matrix_b_0_RREADY <= grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_b_0_RREADY;
        else 
            matrix_b_0_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    matrix_c_0_AWVALID_assign_proc : process(ap_CS_fsm_state3, grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_c_0_AWVALID, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            matrix_c_0_AWVALID <= grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_c_0_AWVALID;
        else 
            matrix_c_0_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    matrix_c_0_BREADY_assign_proc : process(ap_CS_fsm_state3, grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_c_0_BREADY, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            matrix_c_0_BREADY <= grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_c_0_BREADY;
        else 
            matrix_c_0_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    matrix_c_0_WVALID_assign_proc : process(ap_CS_fsm_state3, grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_c_0_WVALID, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            matrix_c_0_WVALID <= grp_dataflow_parent_loop_proc_fu_108_m_axi_matrix_c_0_WVALID;
        else 
            matrix_c_0_WVALID <= ap_const_logic_0;
        end if; 
    end process;

end behav;
