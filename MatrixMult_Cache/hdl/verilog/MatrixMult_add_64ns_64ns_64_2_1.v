// ==============================================================
// Generated by Vitis HLS v2025.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
`timescale 1 ns / 1 ps

module MatrixMult_add_64ns_64ns_64_2_1(clk, reset, ce, din0, din1, dout);
parameter ID         = 1;              // core ID, unused in RTL
parameter NUM_STAGE  = 2;
parameter din0_WIDTH = 64;   // data bitwidth
parameter din1_WIDTH = 64;   // 
parameter dout_WIDTH = 64;   // output bitwidth

// ---- input/output ports list here ----
input   clk;
input   reset;
input   ce;
input  [din0_WIDTH - 1 : 0] din0;
input  [din1_WIDTH - 1 : 0] din1;

output [dout_WIDTH - 1 : 0] dout;

// wire for the primary inputs
wire [64 - 1 : 0] ain_s0 = din0;
wire [64 - 1 : 0] bin_s0 = din1;

// This AddSub module have totally 2 stages. For each stage the adder's width are:
// [32,32]

// Stage 1 logic
wire [32 - 1 : 0]    fas_s1;
wire                 facout_s1;
reg  [32 - 1 : 0]    ain_s1;
reg  [32 - 1 : 0]    bin_s1;
reg  [32 - 1 : 0]    sum_s1;
reg                  carry_s1;
MatrixMult_add_64ns_64ns_64_2_1_comb_adder #(
    .N    ( 32 )
) u1 (
    .din0    ( ain_s0[32 - 1 : 0] ),
    .din1    ( bin_s0[32 - 1 : 0] ),
    .cin  ( 1'b0 ),
    .dout    ( fas_s1 ),
    .cout ( facout_s1 )
);

always @ (posedge clk) begin
    if (ce) begin
        sum_s1   <= fas_s1;
        carry_s1 <= facout_s1;
    end
end

always @ (posedge clk) begin
    if (ce) begin
        ain_s1 <= ain_s0[64 - 1 : 32];
    end
end

always @ (posedge clk) begin
    if (ce) begin
        bin_s1 <= bin_s0[64 - 1 : 32];
    end
end

// Stage 2 logic
wire [32 - 1 : 0]    fas_s2;
wire                 facout_s2;
MatrixMult_add_64ns_64ns_64_2_1_comb_adder #(
    .N    ( 32 )
) u2 (
    .din0    ( ain_s1[32 - 1 : 0] ),
    .din1    ( bin_s1[32 - 1 : 0] ),
    .cin  ( carry_s1 ),
    .dout    ( fas_s2 ),
    .cout ( facout_s2 )
);

assign dout = {fas_s2, sum_s1 };
endmodule

// small adder
module MatrixMult_add_64ns_64ns_64_2_1_comb_adder 
#(parameter
    N = 32
)(
    input  [N-1 : 0]    din0,
    input  [N-1 : 0]    din1,
    input  wire         cin,
    output [N-1 : 0]    dout,
    output wire         cout
);
assign {cout, dout} = din0 + din1 + cin;
endmodule
